{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","rotation","terrain","gravity","climate","react_default","a","createElement","className","Icon_default","path","mdiEarth","size","color","spin","mdiImageFilterHdr","mdiAirplaneTakeoff","mdiWeatherSunny","CardList","planets","map","planet","i","src_components_Card","key","rotation_period","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","state","_this2","Promise","all","asyncToGenerator","regenerator_default","mark","_callee","url","response","morePlanets","combinedArrayOfPlanets","sortedArrayOfPlanets","wrap","_context","prev","next","fetch","sent","json","push","results","flat","sort","b","localeCompare","stop","_x","apply","arguments","catch","error","console","log","_this$state","filteredPlanets","filter","toLowerCase","includes","length","src_components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8aca1c1e.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\nimport Icon from '@mdi/react';\nimport { mdiEarth, mdiImageFilterHdr, mdiAirplaneTakeoff, mdiWeatherSunny } from '@mdi/js';\n\nconst Card = ({name, rotation, terrain, gravity, climate}) => {\n\treturn (\n\t\t<div className='tc dib br4 pa3 ma2 grow bw2 shadow-5 avenir bg-grey'>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Icon \n\t\t\t\t\t\t\tclassName='icon'\n\t\t\t\t\t\t\tpath={mdiEarth}\n\t\t\t\t\t\t\tsize={1}\n\t\t\t\t\t\t\tcolor=\"#00766c\"\n\t\t\t\t\t\t\tspin={5}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tRotation period: {rotation} hours\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Icon \n\t\t\t\t\t\t\tclassName='icon'\n\t\t\t\t\t\t\tpath={mdiImageFilterHdr}\n\t\t\t\t\t\t\tsize={1}\n\t\t\t\t\t\t\tcolor=\"#00766c\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tTerrain: {terrain}\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Icon \n\t\t\t\t\t\t\tclassName='icon'\n\t\t\t\t\t\t\tpath={mdiAirplaneTakeoff}\n\t\t\t\t\t\t\tsize={1}\n\t\t\t\t\t\t\tcolor=\"#00766c\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tGravity: {gravity}\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Icon \n\t\t\t\t\t\t\tclassName='icon'\n\t\t\t\t\t\t\tpath={mdiWeatherSunny}\n\t\t\t\t\t\t\tsize={1}\n\t\t\t\t\t\t\tcolor=\"#00766c\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tClimate: {climate}\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ planets }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\tplanets.map((planet, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tname={planets[i].name} \n\t\t\t\t\t\trotation={planets[i].rotation_period}\n\t\t\t\t\t\tterrain={planets[i].terrain}\n\t\t\t\t\t\tgravity={planets[i].gravity}\n\t\t\t\t\t\tclimate={planets[i].climate}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba bw1 b--navy br-pill avenir b'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='Search planets'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ \n\t\t\toverflowY: 'scroll', \n\t\t\theight: '800px'\n\t\t }}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tplanets: [],\n\t\t\tsearchField: ''\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst urls = [\n\t\t\t'https://swapi.co/api/planets/',\n\t\t\t'https://swapi.co/api/planets/?page=2', \n\t\t\t'https://swapi.co/api/planets/?page=3',\n\t\t\t'https://swapi.co/api/planets/?page=4',\n\t\t\t'https://swapi.co/api/planets/?page=5',\n\t\t\t'https://swapi.co/api/planets/?page=6',\n\t\t\t'https://swapi.co/api/planets/?page=7'\n\t\t]\n\t\t\n\t\tPromise.all(urls.map(async url => {\n\t\t\tconst response = await fetch(url);\n\t\t\tconst morePlanets = await response.json();\n\t\t\tvar combinedArrayOfPlanets = this.state.planets;\n\t\t\tcombinedArrayOfPlanets.push(morePlanets.results);\n\t\t\t\n\t\t\tvar sortedArrayOfPlanets = combinedArrayOfPlanets\n\t\t\t\t.flat()\n\t\t\t\t.sort((a, b) => a.name.localeCompare(b.name));\n\t\t\t\n\t\t\tthis.setState({planets: sortedArrayOfPlanets})\n\t\t}))\n\t\t.catch(error => \n\t\t\tconsole.log('Error during fetching of planets:', error)\n\t\t);\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchField: event.target.value })\n\t}\n\n\trender() {\n\t\tconst { planets, searchField } = this.state;\n\t\tconst filteredPlanets = planets.filter(planet => {\n\t\t\treturn planet.name.toLowerCase().includes(\n\t\t\t\tsearchField.toLowerCase())\n\t\t\t\t||\n\t\t\t\tplanet.terrain.toLowerCase().includes(\n\t\t\t\t\tsearchField.toLowerCase())\n\t\t\t\t||\n\t\t\t\tplanet.rotation_period.toLowerCase().includes(\n\t\t\t\t\tsearchField.toLowerCase())\n\t\t\t\t||\n\t\t\t\tplanet.gravity.toLowerCase().includes(\n\t\t\t\t\tsearchField.toLowerCase())\n\t\t\t\t||\n\t\t\t\tplanet.climate.toLowerCase().includes(\n\t\t\t\t\tsearchField.toLowerCase())\n\t\t})\n\n\t\treturn !planets.length ? \n\t\t\t(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='loadingBar'>Loading</h1>\n\t\t\t\t</div>\n\t\t\t) :\n\t\t\t(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t\t<h1 className='f1'>Star Wars Planets</h1>\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t\t<CardList planets={filteredPlanets}/>\n\t\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}