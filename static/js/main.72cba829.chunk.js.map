{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/LoadingBar/LoadingBar.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","rotation","terrain","gravity","climate","className","path","mdiEarth","size","color","spin","mdiImageFilterHdr","mdiAirplaneTakeoff","mdiWeatherSunny","CardList","planets","map","planet","i","key","rotation_period","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","LoadingBar","GET_PLANETS","gql","App","useState","searchField","setSearchField","useQuery","loading","error","data","filteredPlanets","filter","toLowerCase","includes","event","target","value","Boolean","window","location","hostname","match","link","createHttpLink","uri","cache","InMemoryCache","client","ApolloClient","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uWAsDeA,EAjDF,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,QAChD,OACC,yBAAKC,UAAU,uDACd,6BACC,4BAAKL,GACL,4BACC,4BACC,kBAAC,IAAD,CACCK,UAAU,OACVC,KAAMC,IACNC,KAAM,EACNC,MAAM,UACNC,KAAM,IANR,oBAQmBT,EARnB,UAUA,4BACC,kBAAC,IAAD,CACCI,UAAU,OACVC,KAAMK,IACNH,KAAM,EACNC,MAAM,YALR,YAOWP,GAEX,4BACC,kBAAC,IAAD,CACCG,UAAU,OACVC,KAAMM,IACNJ,KAAM,EACNC,MAAM,YALR,YAOWN,GAEX,4BACC,kBAAC,IAAD,CACCE,UAAU,OACVC,KAAMO,IACNL,KAAM,EACNC,MAAM,YALR,YAOWL,OCtBDU,EArBE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACnB,OACC,6BAEEA,EAAQC,KAAI,SAACC,EAAQC,GACpB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLlB,KAAMe,EAAQG,GAAGlB,KACjBC,SAAUc,EAAQG,GAAGE,gBACrBlB,QAASa,EAAQG,GAAGhB,QACpBC,QAASY,EAAQG,GAAGf,QACpBC,QAASW,EAAQG,GAAGd,eCCXiB,G,MAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,yBAAKjB,UAAU,OACd,2BACCA,UAAU,sCACVkB,KAAK,SACLC,YAAY,iBACZC,SAAUH,OCGCI,EAXA,SAACC,GACf,OACC,yBAAKC,MAAO,CACXC,UAAW,SACXC,OAAQ,UAEPH,EAAMI,WCCKC,G,MANI,kBACjB,yBAAK3B,UAAU,MACb,wBAAIA,UAAU,cAAd,c,6LCIJ,IAAM4B,EAAcC,YAAH,KA8CFC,EAlCH,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACTC,EADS,KACIC,EADJ,OAOiBC,YAASN,GAAlCO,EAPQ,EAORA,QAASC,EAPD,EAOCA,MAAOC,EAPR,EAOQA,KACxB,GAAIF,EAAS,OAAO,kBAAC,EAAD,MACpB,GAAIC,EAAO,OAAO,oCAElB,IAAME,EAAkBD,EAAK3B,QAAQ6B,QAAO,SAAA3B,GAC7C,OACEA,EAAOjB,KAAK6C,cAAcC,SAAST,EAAYQ,gBAC/C5B,EAAOf,QAAQ2C,cAAcC,SAAST,EAAYQ,gBAClD5B,EAAOG,gBACPyB,cACAC,SAAST,EAAYQ,gBACrB5B,EAAOd,QAAQ0C,cAAcC,SAAST,EAAYQ,gBAClD5B,EAAOb,QAAQyC,cAAcC,SAAST,EAAYQ,kBAInD,OACE,yBAAKxC,UAAU,MACb,wBAAIA,UAAU,MAAd,qBACA,kBAAC,EAAD,CAAWiB,aAvBQ,SAAAyB,GACrBT,EAAeS,EAAMC,OAAOC,UAuB1B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUlC,QAAS4B,OCrCPO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wCCPAC,EAAOC,YAAe,CAC1BC,IAAK,4CAGDC,EAAQ,IAAIC,IAEZC,EAAS,IAAIC,IAAa,CAC9BN,OACAG,UAGFI,IAASC,OACP,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC,EAAD,OAEFI,SAASC,eAAe,SDuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.72cba829.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\nimport Icon from '@mdi/react';\nimport { mdiEarth, mdiImageFilterHdr, mdiAirplaneTakeoff, mdiWeatherSunny } from '@mdi/js';\n\nconst Card = ({name, rotation, terrain, gravity, climate}) => {\n\treturn (\n\t\t<div className='tc dib br4 pa3 ma2 grow bw2 shadow-5 avenir bg-grey'>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Icon \n\t\t\t\t\t\t\tclassName='icon'\n\t\t\t\t\t\t\tpath={mdiEarth}\n\t\t\t\t\t\t\tsize={1}\n\t\t\t\t\t\t\tcolor=\"#00766c\"\n\t\t\t\t\t\t\tspin={5}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tRotation period: {rotation} hours\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Icon \n\t\t\t\t\t\t\tclassName='icon'\n\t\t\t\t\t\t\tpath={mdiImageFilterHdr}\n\t\t\t\t\t\t\tsize={1}\n\t\t\t\t\t\t\tcolor=\"#00766c\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tTerrain: {terrain}\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Icon \n\t\t\t\t\t\t\tclassName='icon'\n\t\t\t\t\t\t\tpath={mdiAirplaneTakeoff}\n\t\t\t\t\t\t\tsize={1}\n\t\t\t\t\t\t\tcolor=\"#00766c\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tGravity: {gravity}\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Icon \n\t\t\t\t\t\t\tclassName='icon'\n\t\t\t\t\t\t\tpath={mdiWeatherSunny}\n\t\t\t\t\t\t\tsize={1}\n\t\t\t\t\t\t\tcolor=\"#00766c\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\tClimate: {climate}\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ planets }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\tplanets.map((planet, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tname={planets[i].name} \n\t\t\t\t\t\trotation={planets[i].rotation_period}\n\t\t\t\t\t\tterrain={planets[i].terrain}\n\t\t\t\t\t\tgravity={planets[i].gravity}\n\t\t\t\t\t\tclimate={planets[i].climate}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba bw1 b--navy br-pill avenir b'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='Search planets'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ \n\t\t\toverflowY: 'scroll', \n\t\t\theight: '800px'\n\t\t }}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;\n","import React from \"react\";\nimport \"./LoadingBar.css\";\n\nconst LoadingBar = () => (\n  <div className=\"tc\">\n    <h1 className=\"loadingBar\">Loading</h1>\n  </div>\n);\n\nexport default LoadingBar;\n","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport LoadingBar from \"../components/LoadingBar/LoadingBar\";\nimport \"./App.css\";\n\nconst GET_PLANETS = gql`\n  {\n    planets {\n      name\n      rotation_period\n      terrain\n      gravity\n      climate\n    }\n  }\n`;\n\nconst App = () => {\n  const [searchField, setSearchField] = useState(\"\");\n\n  const onSearchChange = event => {\n    setSearchField(event.target.value);\n  };\n\n  const { loading, error, data } = useQuery(GET_PLANETS);\n  if (loading) return <LoadingBar />;\n  if (error) return <p>Error</p>;\n\n  const filteredPlanets = data.planets.filter(planet => {\n\treturn (\n\t  planet.name.toLowerCase().includes(searchField.toLowerCase()) ||\n\t  planet.terrain.toLowerCase().includes(searchField.toLowerCase()) ||\n\t  planet.rotation_period\n\t\t.toLowerCase()\n\t\t.includes(searchField.toLowerCase()) ||\n\t  planet.gravity.toLowerCase().includes(searchField.toLowerCase()) ||\n\t  planet.climate.toLowerCase().includes(searchField.toLowerCase())\n\t);\n  })\n\n  return (\n    <div className=\"tc\">\n      <h1 className=\"f1\">Star Wars Planets</h1>\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <CardList planets={filteredPlanets} />\n      </Scroll>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloClient } from \"apollo-boost\";\n\nconst link = createHttpLink({\n  uri: \"https://starwars-graphql.herokuapp.com/\"\n});\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link,\n  cache\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}